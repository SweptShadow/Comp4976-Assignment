name: Build and trigger Azure DevOps pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build (quick check)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore backend
        run: dotnet restore backend/ObituaryApp/ObituaryApp.csproj

      - name: Build backend
        run: dotnet build backend/ObituaryApp/ObituaryApp.csproj --configuration Release --no-restore

      - name: Optionally restore and build frontend
        run: |
          if [ -d "frontend/ObituaryApp.Client" ]; then
            dotnet restore frontend/ObituaryApp.Client/ObituaryApp.Client.csproj
            dotnet build frontend/ObituaryApp.Client/ObituaryApp.Client.csproj --configuration Release --no-restore
          else
            echo "No frontend project detected - skipping"
          fi

  trigger-devops:
    name: Trigger Azure DevOps pipeline
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Azure DevOps pipeline via REST
        env:
          AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
          AZURE_DEVOPS_ORG: ${{ secrets.AZURE_DEVOPS_ORG }}
          AZURE_DEVOPS_PROJECT: ${{ secrets.AZURE_DEVOPS_PROJECT }}
          AZURE_DEVOPS_PIPELINE_ID: ${{ secrets.AZURE_DEVOPS_PIPELINE_ID }}
        run: |
          set -euo pipefail
          if [ -z "${AZURE_DEVOPS_PAT-}" ]; then echo "AZURE_DEVOPS_PAT secret is required"; exit 1; fi
          if [ -z "${AZURE_DEVOPS_ORG-}" ] || [ -z "${AZURE_DEVOPS_PROJECT-}" ] || [ -z "${AZURE_DEVOPS_PIPELINE_ID-}" ]; then
            echo "AZURE_DEVOPS_ORG, AZURE_DEVOPS_PROJECT and AZURE_DEVOPS_PIPELINE_ID must be set as repository secrets"; exit 1;
          fi

          TRIGGER_URL="https://dev.azure.com/${AZURE_DEVOPS_ORG}/${AZURE_DEVOPS_PROJECT}/_apis/pipelines/${AZURE_DEVOPS_PIPELINE_ID}/runs?api-version=6.0-preview.1"
          BODY='{"resources": {"repositories": {"self": {"refName": "refs/heads/main"}}}}'

          echo "Triggering Azure DevOps pipeline at $TRIGGER_URL"
          echo "Request body: $BODY"
          
          # Create the auth header separately to avoid command substitution issues
          AUTH_HEADER=$(echo -n ":${AZURE_DEVOPS_PAT}" | base64)
          echo "Auth header created successfully"
          
          # Test the curl command with better error handling
          set +e  # Temporarily disable exit on error
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Basic ${AUTH_HEADER}" \
            -d "$BODY" "$TRIGGER_URL" 2>&1)
          CURL_EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          echo "Curl exit code: $CURL_EXIT_CODE"
          echo "Full response: $RESPONSE"
          
          if [ $CURL_EXIT_CODE -ne 0 ]; then
            echo "Curl command failed with exit code $CURL_EXIT_CODE"
            echo "This might be a network issue, authentication problem, or invalid URL"
            exit 1
          fi

          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          BODY_TEXT=$(echo "$RESPONSE" | sed '$d')

          echo "HTTP status: $HTTP_STATUS"
          echo "Response body: $BODY_TEXT"

          if [ "$HTTP_STATUS" -ne 200 ] && [ "$HTTP_STATUS" -ne 201 ]; then
            echo "Failed to trigger pipeline (HTTP $HTTP_STATUS). Please verify AZURE_DEVOPS_ORG, AZURE_DEVOPS_PROJECT, AZURE_DEVOPS_PIPELINE_ID and that the PAT has 'Build (read & execute)' rights.";
            exit 1;
          fi

          echo "Pipeline triggered successfully! HTTP Status: $HTTP_STATUS"
          
          # Try to extract run ID but don't fail if we can't
          if command -v jq >/dev/null 2>&1; then
            RUN_ID=$(echo "$BODY_TEXT" | jq -r '.id' 2>/dev/null || echo "unknown")
          else
            RUN_ID=$(echo "$BODY_TEXT" | sed -n 's/.*"id"[^0-9]*\([0-9]*\).*/\1/p' 2>/dev/null || echo "unknown")
          fi

          if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ] || [ "$RUN_ID" = "unknown" ]; then
            echo "Pipeline triggered successfully but could not determine run ID from response."
            echo "Check Azure DevOps to see the triggered run."
          else
            echo "Triggered pipeline run id: $RUN_ID"
          fi

      - name: Notify
        if: ${{ always() }}
        run: |
          echo "If the DevOps trigger succeeded, a run was created. Check Azure DevOps project: https://dev.azure.com/${{ secrets.AZURE_DEVOPS_ORG }}/${{ secrets.AZURE_DEVOPS_PROJECT }}/_build"
