# Azure DevOps pipeline to build backend and optional Blazor frontend and deploy to Azure App Service
trigger: none

variables:
  buildConfiguration: "Release"
  webAppName: "obituary-app" # update in pipeline variables if different
  azureServiceConnection: "Azure-ServiceConnection" # service connection name in Azure DevOps (unused unless you re-enable that path)
  # When true, uses a publish profile secure file instead of a service connection
  usePublishProfile: "true"
  # When true, deploys using Kudu ZipDeploy with basic auth creds (no service connection or publish profile required)
  useKuduCredentials: "false"
  kuduUser: ""
  kuduPassword: ""

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: BuildAndPublish
        displayName: Build and publish artifacts
        steps:
          - checkout: self

          - task: UseDotNet@2
            displayName: Use .NET SDK
            inputs:
              packageType: "sdk"
              version: "9.0.x"

          - script: |
              dotnet restore backend/ObituaryApp/ObituaryApp.csproj
            displayName: "Restore backend"

          - script: |
              dotnet build backend/ObituaryApp/ObituaryApp.csproj -c $(buildConfiguration) --no-restore
            displayName: "Build backend"

          # Optionally build frontend if folder exists
          - script: |
              if [ -d "frontend/ObituaryApp.Client" ]; then
                echo "Found frontend; building Blazor WASM..."
                dotnet restore frontend/ObituaryApp.Client/ObituaryApp.Client.csproj
                dotnet build frontend/ObituaryApp.Client/ObituaryApp.Client.csproj -c $(buildConfiguration) --no-restore
              else
                echo "No frontend found; skipping frontend build"
              fi
            displayName: "Build frontend (if present)"

          - script: |
              dotnet publish backend/ObituaryApp/ObituaryApp.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/backend --no-build
            displayName: "Publish backend"

          - script: |
              if [ -d "frontend/ObituaryApp.Client" ]; then
                # Publish Blazor WASM to a staging folder and then copy into backend wwwroot
                dotnet publish frontend/ObituaryApp.Client/ObituaryApp.Client.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/frontend --no-build
                mkdir -p $(Build.ArtifactStagingDirectory)/backend/wwwroot
                cp -r $(Build.ArtifactStagingDirectory)/frontend/wwwroot/* $(Build.ArtifactStagingDirectory)/backend/wwwroot/ || true
              fi
            displayName: "Publish frontend and merge into backend wwwroot (if present)"

          - task: PublishBuildArtifacts@1
            displayName: "Publish backend artifact"
            inputs:
              pathToPublish: "$(Build.ArtifactStagingDirectory)/backend"
              artifactName: "backend-drop"

  - stage: Deploy
    displayName: Deploy
    dependsOn: Build
    jobs:
      - deployment: DeployToAppService
        displayName: Deploy to Azure App Service
        environment: "production"  # Commented out - environment not created yet
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: backend-drop

                # Service connection deployment removed to avoid validation errors in restricted tenants.

                # If you cannot create/authorize an Azure service connection in this project,
                # use a publish profile secure file instead. Upload your App Service publish
                # profile to Azure DevOps Project -> Pipelines -> Library -> Secure files
                # with the name: obituary-publish-profile.publishsettings and grant the
                # pipeline permission to use it. The steps below will consume that file.

                # Publish profile deployment (included only when usePublishProfile == true)
                - ${{ if eq(variables.usePublishProfile, 'true') }}:
                  - task: DownloadSecureFile@1
                    name: GetPublishProfile
                    inputs:
                      secureFile: "publishprofile-obituary-app1154.xml"

                  - task: AzureRmWebAppDeployment@4
                    displayName: "Deploy backend using publish profile"
                    inputs:
                      Package: "$(Pipeline.Workspace)/backend-drop"
                      PublishProfile: "$(GetPublishProfile.secureFilePath)"

                # Kudu ZipDeploy (included only when useKuduCredentials == true)
                - ${{ if eq(variables.useKuduCredentials, 'true') }}:
                  - script: |
                      set -e
                      cd "$(Pipeline.Workspace)/backend-drop"
                      echo "Zipping backend artifact..."
                      zip -r ../backend.zip . >/dev/null
                      cd ..
                      echo "Deploying to Kudu ZipDeploy for $(webAppName)"
                      HTTP_CODE=$(curl -s -o deploy_response.txt -w "%{http_code}" -u "$(kuduUser):$(kuduPassword)" -F package=@backend.zip "https://$(webAppName).scm.azurewebsites.net/api/zipdeploy")
                      echo "Kudu HTTP: $HTTP_CODE"
                      tail -n +1 deploy_response.txt || true
                      if [ "$HTTP_CODE" -ge 400 ]; then
                        echo "ZipDeploy failed"; exit 1; fi
                    displayName: "Deploy backend using Kudu ZipDeploy"